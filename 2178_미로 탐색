//최단거리를 구하는 경우 bfs를 활용
//pair를 활용해서 (좌표를 q에 넣는다
#include <iostream>
#include <queue>
#include <string>
using namespace std;
int map[100][100], visited[100][100];
int dx[4] = { -1, 0, 1, 0 }, dy[4] = { 0, 1, 0, -1 };
int n, m;
void bfs(int i, int j) {
	queue<pair<int, int>> q;
	visited[i][j] = 1;
	q.push(pair<int,int>(i, j));

	while (!q.empty()) {
		pair<int, int> node = q.front();
		q.pop();
		for (int k = 0; k < 4; k++) {
			int x =node.first + dx[k];
			int y =node.second + dy[k];
			if (x >= 0 && x < n && y >= 0 && y < m) {
				if (visited[x][y]==0 && map[x][y] == 1) {
					q.push(pair<int, int>(x, y));
					visited[x][y] = visited[node.first][node.second] + 1;
				}
			}
		}
	}
}
int main() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < m; j++) {
			map[i][j] = s[j] - '0';
		}
	}
	bfs(0, 0);
	cout << visited[n - 1][m - 1];
	return 0;
}
